// Generated by gencpp from file vrep_common/simRosGetVisionSensorImageRequest.msg
// DO NOT EDIT!


#ifndef VREP_COMMON_MESSAGE_SIMROSGETVISIONSENSORIMAGEREQUEST_H
#define VREP_COMMON_MESSAGE_SIMROSGETVISIONSENSORIMAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetVisionSensorImageRequest_
{
  typedef simRosGetVisionSensorImageRequest_<ContainerAllocator> Type;

  simRosGetVisionSensorImageRequest_()
    : handle(0)
    , options(0)  {
    }
  simRosGetVisionSensorImageRequest_(const ContainerAllocator& _alloc)
    : handle(0)
    , options(0)  {
  (void)_alloc;
    }



   typedef int32_t _handle_type;
  _handle_type handle;

   typedef uint8_t _options_type;
  _options_type options;





  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct simRosGetVisionSensorImageRequest_

typedef ::vrep_common::simRosGetVisionSensorImageRequest_<std::allocator<void> > simRosGetVisionSensorImageRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorImageRequest > simRosGetVisionSensorImageRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorImageRequest const> simRosGetVisionSensorImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator1> & lhs, const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.handle == rhs.handle &&
    lhs.options == rhs.options;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator1> & lhs, const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vrep_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "849631fc9158c7822872c77f87a72668";
  }

  static const char* value(const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x849631fc9158c782ULL;
  static const uint64_t static_value2 = 0x2872c77f87a72668ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrep_common/simRosGetVisionSensorImageRequest";
  }

  static const char* value(const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# simxInt simxGetVisionSensorImage(simxInt sensorHandle,simxInt* resolution,simxChar** image,simxChar options,simxInt operationMode)\n"
"#\n"
"\n"
"int32 handle\n"
"uint8 options\n"
;
  }

  static const char* value(const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handle);
      stream.next(m.options);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simRosGetVisionSensorImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrep_common::simRosGetVisionSensorImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "handle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handle);
    s << indent << "options: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.options);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_SIMROSGETVISIONSENSORIMAGEREQUEST_H
