// Generated by gencpp from file vrep_common/simRosDisplayDialogRequest.msg
// DO NOT EDIT!


#ifndef VREP_COMMON_MESSAGE_SIMROSDISPLAYDIALOGREQUEST_H
#define VREP_COMMON_MESSAGE_SIMROSDISPLAYDIALOGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrep_common
{
template <class ContainerAllocator>
struct simRosDisplayDialogRequest_
{
  typedef simRosDisplayDialogRequest_<ContainerAllocator> Type;

  simRosDisplayDialogRequest_()
    : titleText()
    , mainText()
    , dialogType(0)
    , initialText()
    , titleColors()
    , dialogColors()  {
    }
  simRosDisplayDialogRequest_(const ContainerAllocator& _alloc)
    : titleText(_alloc)
    , mainText(_alloc)
    , dialogType(0)
    , initialText(_alloc)
    , titleColors(_alloc)
    , dialogColors(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _titleText_type;
  _titleText_type titleText;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mainText_type;
  _mainText_type mainText;

   typedef int32_t _dialogType_type;
  _dialogType_type dialogType;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _initialText_type;
  _initialText_type initialText;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _titleColors_type;
  _titleColors_type titleColors;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dialogColors_type;
  _dialogColors_type dialogColors;





  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> const> ConstPtr;

}; // struct simRosDisplayDialogRequest_

typedef ::vrep_common::simRosDisplayDialogRequest_<std::allocator<void> > simRosDisplayDialogRequest;

typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest > simRosDisplayDialogRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest const> simRosDisplayDialogRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator1> & lhs, const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator2> & rhs)
{
  return lhs.titleText == rhs.titleText &&
    lhs.mainText == rhs.mainText &&
    lhs.dialogType == rhs.dialogType &&
    lhs.initialText == rhs.initialText &&
    lhs.titleColors == rhs.titleColors &&
    lhs.dialogColors == rhs.dialogColors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator1> & lhs, const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vrep_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f2ff91d637ffb37230ccc9727e2857e";
  }

  static const char* value(const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f2ff91d637ffb37ULL;
  static const uint64_t static_value2 = 0x230ccc9727e2857eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrep_common/simRosDisplayDialogRequest";
  }

  static const char* value(const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# simInt simDisplayDialog(const simChar* titleText,const simChar* mainText,simInt dialogType,const simChar* initialText,const simFloat* titleColors,const simFloat* dialogColors,simInt* uiHandle)\n"
"#\n"
"\n"
"string titleText\n"
"string mainText\n"
"int32 dialogType\n"
"string initialText\n"
"float32[] titleColors\n"
"float32[] dialogColors\n"
;
  }

  static const char* value(const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.titleText);
      stream.next(m.mainText);
      stream.next(m.dialogType);
      stream.next(m.initialText);
      stream.next(m.titleColors);
      stream.next(m.dialogColors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simRosDisplayDialogRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>& v)
  {
    s << indent << "titleText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.titleText);
    s << indent << "mainText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mainText);
    s << indent << "dialogType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dialogType);
    s << indent << "initialText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.initialText);
    s << indent << "titleColors[]" << std::endl;
    for (size_t i = 0; i < v.titleColors.size(); ++i)
    {
      s << indent << "  titleColors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.titleColors[i]);
    }
    s << indent << "dialogColors[]" << std::endl;
    for (size_t i = 0; i < v.dialogColors.size(); ++i)
    {
      s << indent << "  dialogColors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dialogColors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_SIMROSDISPLAYDIALOGREQUEST_H
